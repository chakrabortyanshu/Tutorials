[viewing.] https://www.youtube.com/watch?v=Mvr9jTTnJrU&list=PLkA60AVN3hh8hNjc0fQ5_uJYIrS7s1JLW&index=2
https://www.youtube.com/watch?v=TdVyu7vNouo&list=PLkA60AVN3hh-t0VTESCYCfa4ddGmmXZZt
https://www.youtube.com/user/dockerrun/playlists

Learn 
	Docker Compose
	
############################################################################################################################################

docker start <docker_id>   : if it is an existing docker container that was downloaded earlier.
docker container run --rm -tip 3000:3000 mikesir8/my-first-node-image-dc19     : if it is a new installation.
docker run -d -p 80:80 docker/getting-started
docker run -dp 80:80 docker/getting-started

############################################################################################################################################
	
$ vi dockerFile
	FROM node:12-alpine
	WORKDIR /app
	COPY package.json yarn.lock .
	RUN yarn install
	COPY src ./src
	CMD ["node", "src/index.js"]

$ docker build -t mikesir87/my-first-node-image-dc19 .
$ docker push mikesir87/my-first-node-image-dc19								to run the container.
$ docker container run --rm -tip 3000:3000 mikesir8/my-first-node-image-dc19
$ docker image history mikesir87/my-first-node-image-dc19      					to see the layers and the command that was used to create this specific layer.
$ docker image history mikesir87/my-first-node-image-dc19 --no-trunc


$ docker container run --rm -tip 3000:3000 mikesir8/my-first-node-image-dc19


To remove white out files issue of layered content combine all the commands together:  
Ref: https://www.youtube.com/watch?v=6gJs0F8V3tM&list=PLkA60AVN3hh8hNjc0fQ5_uJYIrS7s1JLW   [26:00]
FROM ubuntu
RUN apt-get update
RUN apt-get install -y python python-pip
RUN pip install awscli
RUN apt-get autoremove --purge -y python-pip


FROM ubuntu
RUN apt-get update && \
	apt-get install -y python python-pip && \
	pip install awscli && \
	apt-get autoremove --purge -y python-pip && \
	rm -rf /var/lib/apt/lists/*

Keep images tight. Only install the deps/tools/packages that are necessary. Use multi-stage builds to separate build-time and run-time dependencies.

FROM node AS build
WORKDIR /usr/src/app
COPY package.json yarn.lock
RUN yarn install
COPY public ./public
COPY src ./src
RUN yarn build

FROM nginx:alpine
COPY nginx.conf /etc/nginx/nginx.conf
COPY --from=build /usr/src/app/build /usr/share/nginx/html


How to Persist Data:
	Volumes provide the ability to persist/supply data. 
	Bind mount volumes: You choose where to persist the data.
		Ex: -v $HOME/mysql-data:/var/lib/mysql
	Named Volume: Let docker choose where to persist the data. Can run command "docker volume inspect" to find actual location.
		Ex: -v mysql-data:/var/lib/mysql
	

$ docker container run --rm -tiv ~/data:/data ubuntu



#Multi stage from with legacy build system.
	$ docker build --tag hello-world-java:multi
	Step 1/6: FROM openjdk:8-jdk AS builder
	Step 2/6: COPY HelloWorld.java
	Step 3/6: RUN javac HelloWorld.java
	Step 4/6: FROM openjdk:8-jre
	Step 5/6: COPY --from=builder /HelloWorld.class .
	Step 6/6: CMD ["java", "HelloWorld"]
	
	$ Docker BUILDKIT=1 docker build --tag hello-world-java:multi

Concurrency.
	Build1 and Build2 are built at the same time.
	
		FROM alpine AS build1
		RUN touch /opt/binary1
		RUN sleep 10
		
		FROM alpine AS build2
		RUN touch /opt/binary2
		RUN sleep 10
	
		FROM alpine AS final
		COPY --from=build1 /opt/binary1 /opt/
		COPY --from=build2 /opt/binary2 /opt/
		
		$ DOCKER _BUILDKIT=1 docker build .       [for concurrency build.]
		$ docker build .                          [for sequencial build.]

